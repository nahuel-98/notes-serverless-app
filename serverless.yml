# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: nahuelmedina
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: demo-projects
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sls-rest-api-backend
plugins:
  - serverless-offline
  - serverless-domain-manager

#Agregamos customHears para usarlos en la app
custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - userId
    - username
  customDomain:
    domainName: api.nahueldev.site
    basePath: 'v1'
    stage: ${self:provider.stage}
    certificateName: nahueldev.site #Lo configuraremos cuando estemos creando el certificado SSL
    createRoute53Record: true # Creates DNS records

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  timeout: 5
  memorySize: 128
  stage: master
  endpointType: regional #Also, we can set 'edge-optimized'.
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage} #  Define una variable de entorno llamada NOTES_TABLE que se pasará a las funciones Lambda. El valor se genera dinámicamente combinando el nombre del servicio (sls-rest-api-backend) y el stage (dev por defecto). Esto permite que el nombre de la tabla sea único por entorno
    #This will allow all Lambdas to interact with DynamoDB
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}'
          #Esto obtiene la región de AWS, ya sea de las opciones pasadas en la línea de comandos (opt:region) o de la configuración del proveedor (self:provider.region).

functions:
  add-note:
    handler: api/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders} #Referenciamos a los customHeaders que definimos debajo de plugins

  update-note:
    handler: api/update-note.handler
    description: patch /note
    events:
      - http:
          path: note
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-note:
    handler: api/get-note.handler
    description: GET /notes
    events:
      - http:
          path: notes/n/{note_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-notes:
    handler: api/get-notes.handler
    description: get /notes
    events:
      - http:
          path: notes
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-note:
    handler: api/delete-note.handler
    description: delete /note
    events:
      - http:
          path: /note/t/{timestamps}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

#Para la tabla de Notas, tendremos userId y timestamps como primary key y podríamos tener un GSI en el atributo noteId
resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain #Especifica que, si eliminas el stack de CloudFormation (por ejemplo, con sls remove), la tabla no se eliminará automáticamente.
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions: #Pondremos los key attributes que serán usados por las claves primaria y secundarias.
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamps
            AttributeType: N
          - AttributeName: noteId
            AttributeType: S
        #Definimos la primary key (claves primarias) que determina cómo se particionan y ordenan los datos.
        KeySchema:
          - AttributeName: userId
            KeyType: HASH #Indica que es una partition key (hash key) que determina en qué partición se almacenará cada item.
          - AttributeName: timestamps
            KeyType: RANGE #Sort key (range key) que permite ordenar los items dentro de una misma partición
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: noteIdIndex
            KeySchema:
              - AttributeName: noteId
                KeyType: HASH
            Projection:
              ProjectionType: ALL #Almacena todos los atributos en el GSI (no es muy eficiente económicamente)
            ProvisionedThroughput: #Define la capacidad provisionada para el GSI, que es independiente de la tabla principal.
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
