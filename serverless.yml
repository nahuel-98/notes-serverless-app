org: nahuelmedina
app: demo-projects
service: sls-rest-api-backend
plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - userId
    - username
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    basePath: 'v2'
    stage: ${self:provider.stage}
    certificateName: ${env:CERTIFICATE_NAME}
    createRoute53Record: true

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  timeout: 5
  memorySize: 128
  # stage: ${env:STAGE}
  stage: ${self:provider.environment.STAGE}
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    # STAGE: ${env:STAGE}
    STAGE: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}'

functions:
  add-note:
    handler: api/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: POST
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-note:
    handler: api/update-note.handler
    description: PATCH /note
    events:
      - http:
          path: note
          method: PATCH
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-note:
    handler: api/get-note.handler
    description: GET /notes
    events:
      - http:
          path: notes/n/{note_id}
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-notes:
    handler: api/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-note:
    handler: api/delete-note.handler
    description: DELETE /note
    events:
      - http:
          path: note/t/{timestamps}
          method: DELETE
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamps
            AttributeType: N
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamps
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: noteIdIndex
            KeySchema:
              - AttributeName: noteId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
